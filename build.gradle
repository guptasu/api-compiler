// Build Script
// ------------

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.7'
  }
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "signing"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "com.google.protobuf"
apply plugin: "application"

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

group = "com.google.api"
version = "0.0.5-SNAPSHOT"
// url to the snapshot repository of a private maven repo.
def privateSnapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
archivesBaseName = "api-compiler"
mainClassName = "com.google.api.tools.framework.tools.configgen.ServiceConfigGeneratorTool"

// TODO: fix error on Travis-CI and workstations without signing config:
//       "Cannot perform signing task ':signArchives' because it has no configured signatory"
//signing {
//    sign configurations.archives
//}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

// Dependencies
// ------------

ext {
  // Shortcuts for libraries we are using
  libraries = [
      // General
      guava: 'com.google.guava:guava:19.0',
      jsr305: 'com.google.code.findbugs:jsr305:3.0.0',
      autovalue: 'com.google.auto.value:auto-value:1.1',
      cglib: 'cglib:cglib:3.1',
      guice: 'com.google.inject:guice:4.0',
      commonsLang: 'org.apache.commons:commons-lang3:3.4',
      snakeyaml: 'org.yaml:snakeyaml:1.16',
      swaggerModel: 'io.swagger:swagger-models:1.5.4',
      swaggerParser: 'io.swagger:swagger-parser:1.0.11',
      grpcCore: 'com.google.api.grpc:grpc-core-proto:0.0.5',
      apacheCommonCli: 'commons-cli:commons-cli:1.2',
      jsonSchemaValidator: 'com.github.fge:json-schema-validator:2.0.0',

      // Testing
      junit: 'junit:junit:4.11',
      mockito: 'org.mockito:mockito-core:1.10.19',
      truth: 'com.google.truth:truth:0.27',
      jodaTime: 'joda-time:joda-time:2.9',

      // Protobuf
      protobuf: 'com.google.protobuf:protobuf-java:3.0.0-beta-3',
      protobufUtil: 'com.google.protobuf:protobuf-java-util:3.0.0-beta-3',
      protoc:  'com.google.protobuf:protoc:3.0.0-beta-3'
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  compile libraries.guava,
    libraries.jsr305,
    libraries.autovalue,
    libraries.protobuf,
    libraries.protobufUtil,
    libraries.cglib,
    libraries.swaggerModel,
    libraries.swaggerParser,
    libraries.guice,
    libraries.commonsLang,
    libraries.snakeyaml,
    libraries.jsonSchemaValidator,
    libraries.grpcCore,
    libraries.apacheCommonCli

  testCompile libraries.junit,
    libraries.mockito,
    libraries.truth,
    libraries.jodaTime
}

run {
  if ( project.hasProperty("appArgs") ) {
    args Eval.me(appArgs)
  }
}

// Test data
// ---------

sourceSets {
  test {
    resources {
      // Include all resources from testdata folders.
      srcDir 'src/test/java'
      include '**/testdata/*'
    }
    resources {
      // Include protos of core platform as some tests depend on this.
      srcDir "${projectDir}/modules/googleapis"
      include '**/*.proto'
    }
  }
}

// Test Logging
// ------------

test {
  testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

// Protobuf
// --------

protobuf {
  protoc {
    artifact = libraries.protoc
  }
}

sourceSets {
  main {
    proto {
      // Include proto sources for testing.
      srcDir "${projectDir}/src/test/java/com/google/api/tools/framework/yaml/testdata"
    }
    java {
      // Include location where proto plugin puts generated sources.
      srcDir "${buildDir}/generated/source/proto/test/java"
    }
  }
}

// Making test utilities available for other projects
// --------------------------------------------------

task testJar(type: Jar, dependsOn: testClasses) {
  classifier = 'testing'
  from sourceSets.test.output
}

configurations {
  testing
  published.extendsFrom testing, archives
}

artifacts {
  testing testJar
}

install {
  configuration = configurations.published
}

// Source jar
// ----------

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource,
       sourceSets.test.allSource
}

artifacts {
  archives sourcesJar, testJar
}

// Jar with dependencies
// ---------------------
task buildApplication(type: Jar) {
  baseName = archivesBaseName + '-with-deps'
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
  manifest {
    attributes 'Main-Class': 'com.google.api.tools.framework.tools.configgen.ServiceConfigGeneratorTool'
  }
}

// Eclipse Annotation Processing
// -----------------------------

// TODO(wrwg): figure whether there is direct support for this in eclipse plugin,
// and use that instead.

ext {
  eclipseAptFolder = '.apt_generated'
  eclipseSettingsDir = file('.settings')
}

configurations {
  codeGeneration
}

dependencies {
  codeGeneration libraries.autovalue, libraries.jsr305
  compile libraries.autovalue, libraries.jsr305
}

compileJava.classpath += configurations.codeGeneration

eclipse {
  jdt.file.withProperties {
    it['org.eclipse.jdt.core.compiler.processAnnotations'] = 'enabled'
  }
}

tasks.eclipseJdt {
  doFirst {
    def aptPrefs =
        file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs")
    aptPrefs.parentFile.mkdirs()

    aptPrefs.text = """\
        eclipse.preferences.version=1
        org.eclipse.jdt.apt.aptEnabled=true
        org.eclipse.jdt.apt.genSrcDir=${eclipseAptFolder}
        org.eclipse.jdt.apt.reconcileEnabled=true
        """.stripIndent()

    file('.factorypath').withWriter {
      new groovy.xml.MarkupBuilder(it).'factorypath' {
        project.configurations.codeGeneration.each { dep->
          factorypathentry(
              kind:'EXTJAR',
              id:dep.absolutePath,
              enabled:true,
              runInBatchMode:false)
        }
      }
    }
  }
}

tasks.cleanEclipseJdt {
  doFirst {
    delete file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs"),
    file('.factorypath')
  }
}

if (project.hasProperty('privateOssrhUsername') && project.hasProperty('privateOssrhPassword')) {
  uploadArchives {
    repositories {
      mavenDeployer {

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: privateOssrhUsername, password: privateOssrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: privateOssrhUsername, password: privateOssrhPassword)
        }

        pom.project {
          name 'api-compiler'
          packaging 'jar'
          description 'Google API Compiler.'
          url 'https://github.com/googleapis/api-compiler'

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
        }
      }
    }
  }
} else {
  logger.warn("The uploadArchives task was skipped. The privateOssrhUsername "
    + "and privateOssrhPassword properties need to be set correctly in "
    + "your ~/.gradle/gradle.properties file in order to upload archives.")
}

